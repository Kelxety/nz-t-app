generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cdb {
  id              String   @id @default(uuid())
  itemCode        String?  @unique @map("item_code") @db.VarChar(36)
  barcode         String?  @db.VarChar(50)
  itemName        String?  @unique @map("item_name") @db.VarChar(255)
  itemDescription String?  @map("item_description") @db.VarChar(50)
  itemcategoryId  String?  @map("itemcategory_id") @db.VarChar(36)
  unitId          String?  @map("unit_id") @db.VarChar(36)
  state           String?  @db.VarChar(20)
  remarks         String?  @db.VarChar(255)
  createdBy       String?  @map("created_by") @db.VarChar(50)
  createdAt       DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedBy       String?  @map("updated_by") @db.VarChar(50)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.DateTime(0)
  itemImage       String?  @db.VarChar(120)

  @@index([itemcategoryId], map: "itemcategory_id")
  @@index([unitId], map: "unit_id")
  @@fulltext([itemCode, barcode, itemName])
  @@map("scm_item")
}

model Newaudit {
  id        Int      @id
  newId     Int      @unique
  userid    String?
  checktime DateTime
}

model User {
  id            String           @id @default(uuid())
  name          String?          @db.VarChar(255)
  accountName   String           @map("account_name") @db.VarChar(50)
  firstName     String           @map("first_name") @db.VarChar(50)
  middleName    String?          @map("middle_name") @db.VarChar(50)
  lastName      String           @map("last_name") @db.VarChar(50)
  gender        Gender?
  status        UserStatus       @default(Active)
  description   String?
  username      String           @unique
  image         String?
  password      String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  refresh_token RefreshToken?
  departmentId  String?          @map("department_id")
  department    Department?      @relation(fields: [departmentId], references: [id])
  role          SystemUserRole[]
  warehouseId   String?          @map("warehouse_id")
  officeId      String?          @map("office_id")
  warehouse     ScmWarehouse?    @relation(fields: [warehouseId], references: [id])
  office        HospitalOffice?  @relation(fields: [officeId], references: [id])

  @@map("system_user")
}

model HospitalOffice {
  id         String   @id @default(uuid())
  officeName String?  @map("office_name") @db.VarChar(255)
  officeAcro String?  @map("office_acro") @db.VarChar(50)
  state      String?  @db.VarChar(20)
  remarks    String?  @db.VarChar(255)
  createdBy  String?  @map("created_by") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedBy  String?  @map("updated_by") @db.VarChar(50)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.DateTime(0)
  user       User[]

  @@map("hospital_office")
}

model ScmWarehouse {
  id             String           @id @default(uuid())
  whName         String           @map("wh_name") @db.VarChar(150)
  whAcro         String           @unique() @map("wh_acro") @db.VarChar(50)
  state          String?          @default("active") @db.VarChar(20)
  createdBy      String?          @map("created_by") @db.VarChar(50)
  createdAt      DateTime         @default(now()) @map("created_at") @db.DateTime(0)
  updatedBy      String?          @map("updated_by") @db.VarChar(50)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.DateTime(0)
  user           User[]
  ScmStockLedger ScmStockLedger[]

  @@fulltext([whName, whAcro])
  @@map("scm_warehouse")
}

model ScmStockLedger {
  id            String        @id @default(uuid())
  fyCode        Int?          @map("fy_code")
  entryDate     DateTime?     @map("entry_date") @db.Date
  warehouseId   String?       @map("warehouse_id") @db.VarChar(36)
  refno         String?       @db.VarChar(30)
  refdate       DateTime?     @db.Date
  qty           Int?
  cost          Float?
  price         Float?
  postedBy      String?       @map("posted_by") @db.VarChar(50)
  postedAt      DateTime?     @default(now()) @map("posted_at") @db.DateTime(0)
  remarks       String?       @db.VarChar(30)
  transactionId String?       @map("transaction_id") @db.VarChar(100)
  scmWarehouse  ScmWarehouse? @relation(fields: [warehouseId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "scm_stock_ledger_ibfk_1")

  @@index([warehouseId], map: "warehouse_id")
  @@fulltext([refno, remarks])
  @@map("scm_stock_ledger")
}

model RefreshToken {
  id            String   @id @default(uuid())
  refresh_token String   @db.VarChar(255)
  validity      DateTime
  username      String
  userId        String   @unique
  system_user   User     @relation(fields: [userId], references: [id])

  @@map("system_refresh_token")
}

model Role {
  id         String              @id @default(uuid())
  roleName   String              @unique @map("role_name") @db.VarChar(50)
  roleDesc   String?             @map("role_desc") @db.VarChar(255)
  user       SystemUserRole[]
  permission PermissionOnRoles[]

  @@map("system_role")
}

model Permission {
  id        String              @id @default(uuid())
  menuName  String              @unique @map("menu_name") @db.VarChar(50)
  code      String              @unique @db.VarChar(100)
  fatherId  String?             @map("father_id")
  orderNum  Int                 @default(0)
  path      String?             @map("path") @db.VarChar(200)
  menuType  String?             @map("menu_type") @db.Char(1)
  visible   String              @db.Char(1)
  status    PermissionStatus    @default(Active)
  isNewLink Boolean?            @map("is_new_link")
  alIcon    String?             @map("al_icon") @db.VarChar(100)
  icon      String?             @db.VarChar(100)
  role      PermissionOnRoles[]
  createdBy String?             @map("created_by") @db.VarChar(50)
  createdAt DateTime            @default(now()) @map("created_at") @db.DateTime(0)
  updatedBy String?             @map("updated_by") @db.VarChar(50)
  updatedAt DateTime            @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("system_permission")
}

model PermissionOnRoles {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String // relation scalar field (used in the `@relation` attribute above)
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String // relation scalar field (used in the `@relation` attribute above)
  createdAt    DateTime   @default(now()) @map("created_at") @db.DateTime(0)
  assignedBy   String

  @@id([roleId, permissionId])
  @@map("system_permission_role")
}

model SystemUserRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
  @@map("system_user_role")
}

model Department {
  id             String       @id @default(uuid())
  departmentName String       @map("department_name") @db.VarChar(255)
  status         normalStatus @default(Active)
  fatherId       Int          @default(0) @map("father_id")
  orderNum       Int          @default(0) @map("order_num")
  createdBy      String?      @map("created_by") @db.VarChar(50)
  createdAt      DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  updatedBy      String?      @map("updated_by") @db.VarChar(50)
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.DateTime(0)
  user           User[]

  @@map("system_department")
}

enum Gender {
  MALE
  FEMALE
}

enum normalStatus {
  Active
  Inactive
}

enum PermissionStatus {
  Active
  Inactive
}

enum UserStatus {
  Active
  Inactive
  Banned
}
